1. 예외와 예외 클래스
예외처리를 하는 이유 : 어플리케이션(프로그램)의 정상적인 종료를 위해서

자바에서는
하드웨어 고장으로 인해 응용프로그램 실행 오류가 발생 - 에러(Error)
Error 이외에 대한 오류를 예외(Exception)이라고 한다.
예외(Exception)란 것은 잘못된 사용 or 코딩으로 인한 오류
    - 일반 예외 (Exception)
       컴파일러가 예외 처리 코드 여부를 검사
    - 실행 예외 (RuntimeException)
        컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외

#자바의 예외처리 설명
자바는 예외가 발생하면 예외 클래스로부터 객체를 생성한다.
이 객체는 예외 처리 시 사용되고, 자바의 모든 에러와 예외 클래스는 Throwalbe을 상속받아 만들어지고,
추가적으로 예외 클래스는 java.lang.exception 클래스를 상속받는다.
실행예외는 RuntimeException 과 그 자식클래스에 해당된다.
java.lang 패키지 =표준 라이브러리
  -> import를 따로 하지않아도, 기본적으로 사용가능한 라이브러리

2. 예외 처리 코드
예외가 발생했을떄 프로그램의 갑작스러운 종료(비정상적 종료)를 막고,
정상 실행을 유지할 수 있도록 처리하는 코드를 예외 처리 코드라 한다.
try - catch
try - catch - finally

생성자 내부나 메소드 내부에서 작성된다.

try {
....
} catch(Exception e){
       e.printStackTrace();
}
 -> try문 내에 문제 발생시 더 이상 처리하지않고 catch로 이동

 try {
 ....
 } catch(Exception e){
        e.printStackTrace();
 }finally{
      항상 실행 //필수 요소 아님
 }

 프로그래밍의 오류 종류
 - 컴파일 에러 (compile-time error) : 캄파일시에 발생하는 에러 , 문법 구문 오류(syntax error)
 - 런타임 에러 (runtime error) : 실행시에 발생하는 에러
 - 논리적 에러 (logical error) : 실행은 되지만, 의도와 다르게 동작하거나 성능 개선을 하다 나타나는 오류
        -> bug , debugging (디버깅,버그픽스) , debugger(디버거,디버깅 수행기)
        ex) 재고관리 --- 재고량이 음수가 나오면 안되는데, 나오는 경우

 4. 리소스 자동 닫기
 리소스(resource) => 데이터를 제공하는 객체(외부의 데이터 객체 : DB , Network , File)
 리소스는 사용하기 위해 열어야(open)하고, 사용이 끝난 다음에는 닫아야(close)한다.
 자나 내부에 위치한 요소가 아니기 때문데, 이러한 프로세스 외부에 있는 데이터에 자바 코드에서
 접근하려고 할때 문제(exception)가 발생할 수 있다.
 이런 입출력 관련된 resource 들에 접근해서 사용하면 닫는 것이 가장 중요함


 예) 파일 내용을 읽기 위해서는 파일을 열어야하고, 다 읽거나 쓴 후에는 저장(save) 후 파일을 닫아야 다른 프로그램에서

예외 발생시키기(throw)
메소드 내부에서 예외가 발생할 때, try-catch 블럭으로 예외를 처리하였다.(방법1:기본)
메소드를 호출한 곳으로 예외를 떠넘길 . 있다. throw(방법2)
